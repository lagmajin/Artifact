/**
 * Autogenerated by Thrift Compiler (0.22.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Test_TYPES_H
#define Test_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace Artifact {

class Example;

typedef struct _Example__isset {
  _Example__isset() : id(false), name(false) {}
  bool id :1;
  bool name :1;
} _Example__isset;

class Example : public virtual ::apache::thrift::TBase {
 public:

  Example(const Example&);
  Example& operator=(const Example&);
  Example() noexcept;

  virtual ~Example() noexcept;
  int32_t id;
  std::string name;

  _Example__isset __isset;

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  bool operator == (const Example & rhs) const;
  bool operator != (const Example &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Example & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Example &a, Example &b);

std::ostream& operator<<(std::ostream& out, const Example& obj);

} // namespace

#endif
