/**
 * Autogenerated by Thrift Compiler (0.22.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TestService_H
#define TestService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "Test_types.h"

namespace Artifact {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TestServiceIf {
 public:
  virtual ~TestServiceIf() {}
  virtual void ping() = 0;
  virtual int32_t add(const int32_t a, const int32_t b) = 0;
};

class TestServiceIfFactory {
 public:
  typedef TestServiceIf Handler;

  virtual ~TestServiceIfFactory() {}

  virtual TestServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TestServiceIf* /* handler */) = 0;
  };

class TestServiceIfSingletonFactory : virtual public TestServiceIfFactory {
 public:
  TestServiceIfSingletonFactory(const ::std::shared_ptr<TestServiceIf>& iface) : iface_(iface) {}
  virtual ~TestServiceIfSingletonFactory() {}

  virtual TestServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(TestServiceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<TestServiceIf> iface_;
};

class TestServiceNull : virtual public TestServiceIf {
 public:
  virtual ~TestServiceNull() {}
  void ping() override {
    return;
  }
  int32_t add(const int32_t /* a */, const int32_t /* b */) override {
    int32_t _return = 0;
    return _return;
  }
};


class TestService_ping_args {
 public:

  TestService_ping_args(const TestService_ping_args&) noexcept;
  TestService_ping_args& operator=(const TestService_ping_args&) noexcept;
  TestService_ping_args() noexcept;

  virtual ~TestService_ping_args() noexcept;

  bool operator == (const TestService_ping_args & /* rhs */) const;
  bool operator != (const TestService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TestService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TestService_ping_pargs {
 public:


  virtual ~TestService_ping_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TestService_ping_result {
 public:

  TestService_ping_result(const TestService_ping_result&) noexcept;
  TestService_ping_result& operator=(const TestService_ping_result&) noexcept;
  TestService_ping_result() noexcept;

  virtual ~TestService_ping_result() noexcept;

  bool operator == (const TestService_ping_result & /* rhs */) const;
  bool operator != (const TestService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TestService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TestService_ping_presult {
 public:


  virtual ~TestService_ping_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TestService_add_args__isset {
  _TestService_add_args__isset() : a(false), b(false) {}
  bool a :1;
  bool b :1;
} _TestService_add_args__isset;

class TestService_add_args {
 public:

  TestService_add_args(const TestService_add_args&) noexcept;
  TestService_add_args& operator=(const TestService_add_args&) noexcept;
  TestService_add_args() noexcept;

  virtual ~TestService_add_args() noexcept;
  int32_t a;
  int32_t b;

  _TestService_add_args__isset __isset;

  void __set_a(const int32_t val);

  void __set_b(const int32_t val);

  bool operator == (const TestService_add_args & rhs) const;
  bool operator != (const TestService_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TestService_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TestService_add_pargs {
 public:


  virtual ~TestService_add_pargs() noexcept;
  const int32_t* a;
  const int32_t* b;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TestService_add_result__isset {
  _TestService_add_result__isset() : success(false) {}
  bool success :1;
} _TestService_add_result__isset;

class TestService_add_result {
 public:

  TestService_add_result(const TestService_add_result&) noexcept;
  TestService_add_result& operator=(const TestService_add_result&) noexcept;
  TestService_add_result() noexcept;

  virtual ~TestService_add_result() noexcept;
  int32_t success;

  _TestService_add_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TestService_add_result & rhs) const;
  bool operator != (const TestService_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TestService_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TestService_add_presult__isset {
  _TestService_add_presult__isset() : success(false) {}
  bool success :1;
} _TestService_add_presult__isset;

class TestService_add_presult {
 public:


  virtual ~TestService_add_presult() noexcept;
  int32_t* success;

  _TestService_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TestServiceClient : virtual public TestServiceIf {
 public:
  TestServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TestServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping() override;
  void send_ping();
  void recv_ping();
  int32_t add(const int32_t a, const int32_t b) override;
  void send_add(const int32_t a, const int32_t b);
  int32_t recv_add();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TestServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<TestServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (TestServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TestServiceProcessor(::std::shared_ptr<TestServiceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &TestServiceProcessor::process_ping;
    processMap_["add"] = &TestServiceProcessor::process_add;
  }

  virtual ~TestServiceProcessor() {}
};

class TestServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TestServiceProcessorFactory(const ::std::shared_ptr< TestServiceIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< TestServiceIfFactory > handlerFactory_;
};

class TestServiceMultiface : virtual public TestServiceIf {
 public:
  TestServiceMultiface(std::vector<std::shared_ptr<TestServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TestServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<TestServiceIf> > ifaces_;
  TestServiceMultiface() {}
  void add(::std::shared_ptr<TestServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  int32_t add(const int32_t a, const int32_t b) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(a, b);
    }
    return ifaces_[i]->add(a, b);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TestServiceConcurrentClient : virtual public TestServiceIf {
 public:
  TestServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  TestServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping() override;
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  int32_t add(const int32_t a, const int32_t b) override;
  int32_t send_add(const int32_t a, const int32_t b);
  int32_t recv_add(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
